<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aurélien Hervé]]></title>
  <link href="http://aurelien-herve.com/atom.xml" rel="self"/>
  <link href="http://aurelien-herve.com/"/>
  <updated>2014-03-06T17:14:21+01:00</updated>
  <id>http://aurelien-herve.com/</id>
  <author>
    <name><![CDATA[A. Hervé]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Having fun with functional programming in ruby]]></title>
    <link href="http://aurelien-herve.com/blog/2014/02/27/some-cool-functional-programming-with-ruby/"/>
    <updated>2014-02-27T21:51:46+01:00</updated>
    <id>http://aurelien-herve.com/blog/2014/02/27/some-cool-functional-programming-with-ruby</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;re going to play around with functional programming. Yay !</p>

<ul>
<li><em>Ok, what&rsquo;s that exactly ?</em></li>
</ul>


<p>Wikipedia says it pretty much:</p>

<blockquote><p>functional programming is a programming paradigm, a style of building the structure and elements of computer programs, that treats computation as the evaluation of mathematical functions and avoids state and mutable data.</p></blockquote>

<ul>
<li>Alright, now let&rsquo;s have some fun with functional programming style, and of course, let&rsquo;s do that with ruby :)</li>
</ul>


<p>In this post we&rsquo;re going to manipulate some (high order) functions, and build a derivative operator in a functional style.</p>

<!-- more -->


<h3>Level 1 : some basic functions</h3>

<p>In ruby you can define a <em>lambda</em> operator, that is an anonymous function that reads exactly as a mathematician would define it. For instance,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">square</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">}</span> <span class="c1">#or its equivalent notation: square = lambda { |x| x*x }</span>
</span><span class='line'><span class="n">plus_one</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>defines a function that, when given an argument <code>x</code>, returns <code>x*x</code>.</p>

<p>We can call it and see the result :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">square</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 4</span>
</span><span class='line'><span class="n">plus_one</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>More interestingly, higher order function can be defined, whose purpose is to manipulate other functions.</p>

<p>For instance, let&rsquo;s define some basic operators <code>minus</code>,<code>mult</code>,<code>div</code> that can respectively add, subtract, multiply or divide functions altogether.</p>

<p>Note that we want <code>new_function = minus.(f,g)</code> to return a function.
Rather than describing how to subtract two values, we want to define what <code>f -g</code> means when both f and g are functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">minus</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">div</span>   <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">mult</span>  <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does that works ? With the previously defined functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_fancy_func</span> <span class="o">=</span> <span class="n">minus</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">,</span><span class="n">plus_one</span><span class="p">)</span> <span class="c1"># defining a new function</span>
</span><span class='line'><span class="n">my_fancy_func</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 5 = 3*3 - ( 3 + 1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet.</p>

<ul>
<li><em>Allright, but how is that really fancy?</em></li>
</ul>


<p>Well, let&rsquo;s take our trip to a next step:</p>

<h3>Level 2 : I can haz derivative ?</h3>

<p><em>Hey, I know an operator that works on functions : the derivative operator. How about we build one ?</em></p>

<p>Alright. Let&rsquo;s build a derivative operator. That is, a function that takes a function as an argument, and return another function: its derivate.</p>

<p>The derivative of a function at some point <em>x</em> can be obtained by evaluating
<img src="http://aurelien-herve.com/images/derivative.gif" alt="derivative" />, <em>i.e.</em> the limit when epsilon &ndash;> 0 of a derivative scheme based on f at point x.</p>

<p>Here&rsquo;s the plan :</p>

<ul>
<li>Define a limit operator</li>
<li>define a derivative scheme</li>
<li>define the derivative operator as the limit of the derivative scheme of a function</li>
<li>Since we&rsquo;re at it, define any <em>nth derivative operator</em> : We should be able to derivate n times any function.</li>
<li>Profit and use it on <em>any function</em></li>
</ul>


<p>For the sake of clarity, let&rsquo;s begin with a simplified version, and assume that <code>epsilon = 1e-3</code> is low enough to approximate the limit of our derivative scheme.</p>

<p>Once we&rsquo;re more comfortable with the concepts, we&rsquo;ll get rid of this assumption and implement a true derivative operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">derivative</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span> <span class="c1"># we take a function as argument</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="c1"># the function takes a real x as argument</span>
</span><span class='line'>    <span class="p">(</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="p">)</span> <span class="o">/</span> <span class="p">(</span> <span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">3</span> <span class="p">)</span> <span class="c1"># apply the scheme</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Let&#39;s try:</span>
</span><span class='line'><span class="n">derivative_of_square</span> <span class="o">=</span> <span class="n">derivative</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x00000001b7c270@(irb):24 (lambda)&gt; . Yay, a new function ! </span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Can we use it ? </span>
</span><span class='line'><span class="n">square</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 9</span>
</span><span class='line'><span class="n">derivative_of_square</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#  =&gt; 5.999999999999339 ~ 2*3. Cool !</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Sooo&hellip; can I derivate twice ?</em></p>

<p>Yup. Simply get the derivative of the derivative :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">second_derivative_of_square</span> <span class="o">=</span> <span class="n">derivative</span><span class="o">.</span><span class="p">(</span> <span class="n">derivative</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span> <span class="p">)</span> <span class="c1"># this should be a constant function that return 2</span>
</span><span class='line'><span class="n">second_derivative_of_square</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 1.999999999946489</span>
</span><span class='line'><span class="n">second_derivative_of_square</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 2.000000000279556</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Sooooooo&hellip; can I derivate n times ?</em></p>

<p>Yup. Although we don&rsquo;t want to create thousands of <code>third_derivative</code>,<code>forth_derivative</code>&hellip;etc, right ?</p>

<p>Let&rsquo;s go one order higher and define the <em>nth derivative operator</em></p>

<p>Since we can derivate a function, and we want to do it n times, what we miss is simply a <code>n-times combinator</code>. For example, <code>n_times.(f).(2)</code> should return <code>x -&gt; f(f(x))</code> regardless of what <code>f</code> and <code>x</code> are.</p>

<p>Shall we do it recursively ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n_times</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="p">,</span><span class="n">f</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">f</span> <span class="p">:</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">n_times</span><span class="o">.</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">))}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Explanation</strong> :</p>

<ul>
<li>if <em>n = 1</em> then we want f. so return f. So far so good, <code>n_times(1,f) = f</code></li>
<li>If <em>n = 2</em>, then we want f(f) = f( n_times.(1,f) )</li>
<li>If <em>n = 3</em>, then we want f(f(f)) = f( n_times.(2,f) )</li>
</ul>


<p>&hellip;etc. Get it ?</p>

<p><em>Wait&hellip; that&rsquo;s all ? Where&rsquo;s my nth derivative ?</em></p>

<p>Now it&rsquo;s quite easy to derivate n times :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nth_derivator</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">n_times</span><span class="o">.</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">derivate</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>nth_derivator</code> will take <code>n</code> as an argument, and derivate n times whatever we decide to pass to it.</p>

<p>Let&rsquo;s play with it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">derivative_of_square</span> <span class="o">=</span> <span class="n">nth_derivator</span><span class="o">.</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span> <span class="c1">#derivate one time</span>
</span><span class='line'><span class="n">second_derivative_of_square</span> <span class="o">=</span> <span class="n">nth_derivator</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span> <span class="c1">#derivate two times</span>
</span><span class='line'><span class="n">third_derivative_of_square</span> <span class="o">=</span> <span class="n">nth_derivator</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span> <span class="c1">#derivate three times</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">derivative_of_square</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 5.999999999999339</span>
</span><span class='line'><span class="nb">p</span> <span class="n">second_derivative_of_square</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 2.000000000279556</span>
</span><span class='line'><span class="nb">p</span> <span class="n">third_derivative_of_square</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 0.0</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>That&rsquo;s cool ! but those are approximations, right ? we never actually calculated the limit</em></p>

<p>Yet.</p>

<h3>Level 3 : More functional, and a true limit operator</h3>

<p>Now that we have a better feel for it (have we?), let&rsquo;s refactor our derivative operator so that it is <em>actually</em> defined as a limit. And hey, let&rsquo;s parametrize the precision that we want since we&rsquo;re at it.</p>

<p><img class="right" src="http://aurelien-herve.com/images/party_over.gif" title="" ></p>

<p>First, let&rsquo;s write a bunch of tools that are going to be useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">minus</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="c1"># f - g</span>
</span><span class='line'><span class="n">div</span>   <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="c1"># f / g</span>
</span><span class='line'><span class="n">mult</span>  <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="c1"># f * g</span>
</span><span class='line'><span class="n">norm</span>  <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span>   <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span><span class="p">}}</span> <span class="c1"># absolute value</span>
</span><span class='line'><span class="n">const</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">const</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">const</span><span class="p">}</span> <span class="p">}</span> <span class="c1"># That&#39;s right, the constant function !</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You should recognize these:</span>
</span><span class='line'><span class="n">plus_eps</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">eps</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">eps</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">min_eps</span>  <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">eps</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># is f &lt; g ? </span>
</span><span class='line'><span class="n">inf</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the limit function. Here we are going to define a function, that actually implement the following (naive) algorithm:</p>

<ul>
<li>variables : a function <code>f</code>, a starting epsilon <code>eps</code>, and a threshold <code>tres</code></li>
<li><ol>
<li>Evaluate y = ||f(x + epsilon/2) &ndash; f(x + epsilon) ||</li>
</ol>
</li>
<li><ol>
<li>if y &lt; tres, then we are converged, and lowering epsilon wouldn&rsquo;t change the result much. Return f(x+epsilon).</li>
</ol>
</li>
<li><ol>
<li>else, reduce epsilon and try again (i.e. go to 1.)</li>
</ol>
</li>
</ul>


<p>Obviously, this algorithm is quite simple, and will only work when dealing with smooth, continuous, and gracious functions.</p>

<p>Ready ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lim</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">eps</span><span class="p">,</span><span class="n">tres</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inf</span><span class="o">.</span><span class="p">(</span>
</span><span class='line'>      <span class="n">norm</span><span class="o">.</span><span class="p">(</span>
</span><span class='line'>        <span class="n">minus</span><span class="o">.</span><span class="p">(</span>
</span><span class='line'>          <span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">),</span>
</span><span class='line'>          <span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">),</span> <span class="n">const</span><span class="o">.</span><span class="p">(</span><span class="n">tres</span><span class="p">)</span> <span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">?</span> <span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">:</span> <span class="n">lim</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">eps</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span><span class="n">tres</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Does it even work ?</span>
</span><span class='line'><span class="n">lim</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 5.0625 wut ?</span>
</span><span class='line'><span class="n">lim</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 4.0156402587890625 Ah. Better</span>
</span><span class='line'><span class="n">lim</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 4.0 How nice !</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;re getting close ! Let&rsquo;s refactor our derivative operator in a more appropriate way and get our final derivative operator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># derivative_scheme.(f).(x) shall be a function of epsilon</span>
</span><span class='line'><span class="n">derivative_sheme</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">eps</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">div</span><span class="o">.</span><span class="p">(</span> <span class="n">minus</span><span class="o">.</span><span class="p">(</span><span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">min_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">),</span> <span class="n">mult</span><span class="o">.</span><span class="p">(</span><span class="n">const</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">const</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)))</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># And the derivative operator: </span>
</span><span class='line'><span class="c1"># Let&#39;s fix the treshold at tres = 1e-16</span>
</span><span class='line'><span class="n">derivate</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lim</span><span class="o">.</span><span class="p">(</span><span class="n">derivative_sheme</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># limit of the derivative scheme of f(x), taken at epsilon = 0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Isn&#39;t that fancy ? We juste define the derivative operator</span>
</span><span class='line'><span class="c1"># exactly as the limit of (f(x + e) - f(x - e))/(2e) when epsilon -&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>Here&rsquo;s a full code of what we implemented <a href="http://aurelien-herve.com/assets/aherves_blog_ruby_functional.rb">(download it)</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># Our fancy function. Could be exactly anything</span>
</span><span class='line'><span class="n">square</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># some tools</span>
</span><span class='line'><span class="n">minus</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">div</span>   <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">mult</span>  <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">norm</span>  <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span>   <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span><span class="p">}}</span>
</span><span class='line'><span class="n">const</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">const</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">const</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">plus_eps</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">eps</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">eps</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">min_eps</span>  <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">eps</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">inf</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="p">{</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">g</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The limit operator</span>
</span><span class='line'><span class="n">lim</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">,</span><span class="n">eps</span><span class="p">,</span><span class="n">prec</span> <span class="p">{</span>
</span><span class='line'>   <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inf</span><span class="o">.</span><span class="p">(</span><span class="n">norm</span><span class="o">.</span><span class="p">(</span><span class="n">minus</span><span class="o">.</span><span class="p">(</span><span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)))</span> <span class="p">,</span> <span class="n">const</span><span class="o">.</span><span class="p">(</span><span class="n">prec</span><span class="p">)</span> <span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">?</span> <span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">:</span> <span class="n">lim</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">eps</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span><span class="n">prec</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The derivative scheme</span>
</span><span class='line'><span class="n">derivative_sheme</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">eps</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">div</span><span class="o">.</span><span class="p">(</span> <span class="n">minus</span><span class="o">.</span><span class="p">(</span><span class="n">plus_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">min_eps</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">),</span> <span class="n">mult</span><span class="o">.</span><span class="p">(</span><span class="n">const</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">const</span><span class="o">.</span><span class="p">(</span><span class="n">eps</span><span class="p">)))</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The derivative operator at precision 1e-16 is the limit of the derivative scheme</span>
</span><span class='line'><span class="n">derivate</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="p">{</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">lim</span><span class="o">.</span><span class="p">(</span><span class="n">derivative_sheme</span><span class="o">.</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># call any function n times</span>
</span><span class='line'><span class="n">n_times</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="p">,</span><span class="n">f</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">f</span> <span class="p">:</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="n">n_times</span><span class="o">.</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">x</span><span class="p">))}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># an nth derivator is a derivator called n times:</span>
</span><span class='line'><span class="n">nth_derivator</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">n_times</span><span class="o">.</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">derivate</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">nth_derivator</span><span class="o">.</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 6 =  2*(3)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">nth_derivator</span><span class="o">.</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 2 =  constant(2)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">nth_derivator</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">square</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 0 = constant(0)</span>
</span><span class='line'>
</span><span class='line'><span class="n">logarithm</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">nth_derivator</span><span class="o">.</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">logarithm</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 0.3333333333430346 ~ 1/3 I can derivate whatever I want !</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well that&rsquo;s all, hope you enjoyed reading this (at least) as much as I enjoyed writing it. Feel free to drop some comments, suggest anything, c orrect some code (or my english ) :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create a gem structure with rspec and code coverage]]></title>
    <link href="http://aurelien-herve.com/blog/2014/02/15/create-a-gem-structure-with-rspec-and-code-coverage/"/>
    <updated>2014-02-15T21:59:36+01:00</updated>
    <id>http://aurelien-herve.com/blog/2014/02/15/create-a-gem-structure-with-rspec-and-code-coverage</id>
    <content type="html"><![CDATA[<h3>tl;dr</h3>

<p>This is a step-by-step tutorial for creating a gem structure, along with some unit tests and code coverage.</p>

<!-- more -->


<h2>1. Bundle: create the structure</h2>

<ul>
<li>Create the directories using bundler:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle gem my_fancy_gem
</span><span class='line'>create  my_fancy_gem/Gemfile
</span><span class='line'>create  my_fancy_gem/Rakefile
</span><span class='line'>create  my_fancy_gem/LICENSE.txt
</span><span class='line'>create  my_fancy_gem/README.md
</span><span class='line'>create  my_fancy_gem/.gitignore
</span><span class='line'>create  my_fancy_gem/my_fancy_gem.gemspec
</span><span class='line'>create  my_fancy_gem/lib/my_fancy_gem.rb
</span><span class='line'>create  my_fancy_gem/lib/my_fancy_gem/version.rb
</span><span class='line'>Initializing git repo in &lt;wherever you are&gt;/my_fancy_gem</span></code></pre></td></tr></table></div></figure>


<ul>
<li>fill the gem description in <code>my_fancy_gem.gemspec</code></li>
</ul>


<h2>2. Configure rspec</h2>

<ul>
<li>add rspec to the dependencies in <code>my_fancy_gem.gemspec</code>:</li>
</ul>


<figure class='code'><figcaption><span>my_fancy_gem.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rake&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rspec&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and make sure you install it:</p>

<pre><code>$ bundle
</code></pre>

<ul>
<li>create <code>spec/spec_helper.rb</code> file:</li>
</ul>


<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;my_fancy_gem&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>I like it better with colors. In <code>.rspec</code>:</li>
</ul>


<figure class='code'><figcaption><span>.rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">--</span><span class="n">color</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Now let&rsquo;s create some method and test it</h3>

<p>Let&rsquo;s write a hello world method with TDD</p>

<ul>
<li>in <code>spec/my_fancy_gem_spec.rb</code></li>
</ul>


<figure class='code'><figcaption><span>spec/my_fancy_gem_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'><span class="n">describe</span> <span class="no">SmartadCollector</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should greet&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="ss">SmartadCollector</span><span class="p">:</span><span class="ss">:greet</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;Hello, world!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Proudly watch the test failing by running <code>rspec</code></li>
<li>Now let&rsquo;s write the actual method: <code>lib/my_fancy_gem_spec.rb</code></li>
</ul>


<figure class='code'><figcaption><span>lib/my_fancy_gem.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;my_fancy_gem/version&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">MyFancyGem</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">greet</span>
</span><span class='line'>    <span class="s2">&quot;Hello, world!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and (even more) proudly watch the test pass:</p>

<pre><code>$ rspec #=&gt; 1 example, 0 failures
</code></pre>

<h2>3. Adding code coverage tools</h2>

<p><a href="https://github.com/colszowka/simplecov">SimpleCov</a> to get code coverage:</p>

<ul>
<li>add <code>spec.add_development_dependency "simplecov"</code> in <code>my_fancy_gem_spec.gemspec</code>.</li>
<li><p><code>$ bundle install</code> to install the simple cov gem</p></li>
<li><p>create a <code>.simplecov</code> file:</p></li>
</ul>


<figure class='code'><figcaption><span>.simplecov</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SimpleCov</span><span class="o">.</span><span class="n">start</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">add_group</span> <span class="s2">&quot;lib&quot;</span><span class="p">,</span> <span class="s2">&quot;lib&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add it to rspec: <code>spec/spec_helper.rb</code>:</li>
</ul>


<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;simplecov&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;my_fancy_gem_spec&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note that the <code>require 'simplecov'</code> has to be added before <code>require 'my_fancy_gem_spec'</code>.</p>

<p>Now running <code>$ rspec</code> will output a report on code coverage, as well as a <code>coverage</code> directory. You can browse <code>coverage/index.html</code> to view the detailed report.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We should fix the physics engine]]></title>
    <link href="http://aurelien-herve.com/blog/2014/02/13/we-should-fix-the-physics-engine/"/>
    <updated>2014-02-13T16:54:23+01:00</updated>
    <id>http://aurelien-herve.com/blog/2014/02/13/we-should-fix-the-physics-engine</id>
    <content type="html"><![CDATA[<p>I think the Universe&rsquo;s laws of physics are now way outdated. Let&rsquo;s suggest a patch for this.</p>

<p><code>Universe::Physics</code> v 2.1.0 release notes</p>

<ul>
<li><strong>Quantum tunnel glitch</strong> : fixed a bug that randomly caused particles to go through well potentials although they lacked the energy to do it.</li>
<li><strong>High velocity engine improved</strong> : heavy computations at high speed caused local space-time to bend. The engine is now better and the so-called relativistic effects are now minimized.</li>
<li><strong>Improved data structure (Heisenberg&rsquo;s bug)</strong>: Variables are stored with more efficiency. It is now possible to know both where a particle is, and at what speed it travels.</li>
</ul>


<!-- more -->


<ul>
<li><strong>Entropy leak</strong>: Some memory leaks that caused entropy to constantly grow without limit have been fixed.</li>
<li><strong>Teleportation</strong>: Owing to some pointer error, changing the spin of some particle would instantly affect its twin particle in some setups. This is no longer the case.</li>
<li><strong>Planck&rsquo;s constant</strong>: A better meshing takes place, and the Planck&rsquo;s constant has been drastically reduced so the universe seems more &ldquo;continuous&rdquo;.</li>
<li><strong>Electrons</strong>: For the sake of simplicity, electrons now actually rotate around the atoms.</li>
<li><strong>Pi number</strong>: It seems the ratio between a circle diameter and its circumference has attracted a lot of attention during the last two millenniums. For more convenience, it has been set to an exact &mdash;rational&mdash; value of <code>pi= 3.14</code>.</li>
</ul>


<p>Any further suggestions will be welcomed !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://aurelien-herve.com/blog/2014/02/13/hello-world/"/>
    <updated>2014-02-13T16:45:43+01:00</updated>
    <id>http://aurelien-herve.com/blog/2014/02/13/hello-world</id>
    <content type="html"><![CDATA[<p>hello, world !</p>
]]></content>
  </entry>
  
</feed>
